Документация к проделанной над классом юзера работой

Дело в том, что полей дефолтного класса User не хватает для задач нашего проекта, поэтому его необходимо дополнить.
Так что был создан новый класс CustomUser, наследующий AbstractUser и все поля обычного User соответственно.
Но обо всём по порядку.

1. Создано приложение users (команда в терминале python manage.py startapp users)
В этом приложении будет идти работа над тем, что связано с юзерами.
И не будет лишнего захламления в основном приложении.
И все нижеописанные действия там и происходили, кстати.

2. Приложение users зарегистрировано в settings.py
В INSTALLED_APPS добавляем элемент 'users'.

3. Отредактирован класс конфига приложения users
В apps.py есть класс UsersConfig, и вот туда добавлено два поля: verbose_name = 'Users' и label = 'users'.
Вроде бы для чего-то нужно.

4. Создана модель CustomUser
В models.py импортирован класс AbstractUser, от которого унаследован новый класс CustomUser.
Он уже содержит все поля дефолтного юзера - в частности, username, email, password.
И туда добавлены поля real_name (CharField), city (CharField) и birth (CharField).
Стоит отметить, что birth, по-хорошему, должна быть DateField, но в форме он почему-то работает как CharField, а по
факту требует правильной записи даты. Поэтому было принято решение пока что оставить CharField, чтобы сайт не крашился.

5. Переопределён класс юзера в settings.py
Создана переменная AUTH_USER_MODEL = 'users.CustomUser'.
Так что теперь наш новый класс со старым конфликтовать не должен.

6. CustomUser зарегистрирован в админской панели
В admin.py импортированы UserAdmin и непосредственно CustomUser.
Создан класс CustomUserAdmin, наследующий UserAdmin и имеющий декоратор @admin.register(CustomUser).
Суть этого класса в добавлении всей этой шняги в админскую панель. Прям там настройки полей и добавляются.